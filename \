Program Padaria;
Uses Crt;

Type Produto = Record
    cod: Integer;
    nome: String[80];
    qtd: Integer;
    status: Char;
End;

Var { Variáveis globais }
    produto: Produto;
    arqProdutos: File of Produto;
    escolha: Integer;
    listaDeEstados: Array [0..3] of Char;

Procedure inicializarGlobais();
Begin
    escolha := 0;

    listaDeStatus[0] = 'A';
    listaDeStatus[1] = 'a';
    listaDeStatus[2] = 'i';
    listaDeStatus[3] = 'I';
End;

{ Configura o arquivo }
Procedure configArquivo;
Begin
    assign(arqProdutos, 'padaria.dat');
    {$I-}
    reset(arqProdutos);
    {$I+}
    if IOresult <> 0 then
        rewrite(arqProdutos);
End;

{ Desenha uma linha de  caracates }
Procedure menuLinha();
Begin
    writeln('--------------------------------------------------------------------------------');
End;

{ Cabeçalho de cada menu }
Procedure menuCabecalho(titulo: String);
Begin
    menuLinha();
    writeln('| ', titulo);
    menuLinha();
End;

{ Retorna um erro quando a opção é inválida }
Procedure opcaoInvalida();
Begin
    clrScr();
    writeln('Opção inválida, tente novamente');
    readKey();
End;

{ Tela de finalização do programa }
Procedure encerrarPrograma();
Begin
    ClrScr();
    close(arqProdutos);
    writeln('=> Programa encerrado');
    readkey();
    exit;
End;


{ Tela do menu principal }
Function menuPrincipal: Integer;
Begin
    menuCabecalho('Padaria do Seu Zé');
    writeln('| 1. Incluir Produto');
    writeln('| 2. Alterar Produto');
    writeln('| 3. Relatório dos Produtos');
    writeln('| 4. Sobre o autor e o Programa');
    writeln('| 5. Sair ');
    menuLinha();
    write('ESCOLHA: ');
    read(escolha);

    menuPrincipal := escolha;
End;

{ Grava um registro no arquivo }
Procedure gravarRegistro();
Begin
    
End;


Procedure validarNegativo(campo: String;);
Var
    entrada: Integer;
    confirmacao: Boolean;
Begin
    confirmacao := false;

    Repeat 
        ClrScr();
        write(campo);
        read(entrada);

        if entrada < 0 then
        Begin
            write('Valores negativos não são permitidos');
            readkey();
        Else
            confimacao = true;
        End;
    Until confirmacao = true;

    validarNegativo := entrada;
End;

Procedure validarCaracteres(campo: String; tamanho: Integer);
Begin

End;

{ Interface para cadastro de um novo produto }
Procedure incluirProduto();
Begin
    seek(arqProdutos, filesize(arqProdutos));

    produto.cod = validarNegativo('Código: ');
    produto.nome = validarCaracteres('Nome: ', 80);
    produto.quantidade = validarNegativo('Quantidade: ');
    produto.status = validarStatus(listaDeStatus);

End;

{ Altera as informações de cadastro de um produto }
Procedure alterarProduto();
Begin

End;

{ Relatório dos produtos cadastrados }
Procedure relatorioProdutos();
Begin

End;

{ Informações sobre o programa}
Procedure sobre(); 
Begin

End;



BEGIN
{    Repeat 
        inicializarGlobais();

        escolha := menuPrincipal;

        Case escolha of
            1: incluirProduto();
            2: alterarProduto();
            3: relatorioProdutos();
            4: sobre();
            5: encerrarPrograma();
        else
            opcaoInvalida();
        end;
    Until escolha = 5;}
    validarNegativo('Numero');
END.
